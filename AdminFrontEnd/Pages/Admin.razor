@page "/Admin"
@using WebApplication1.Shared
@using HttpClients.ClientInterface
@inject ShellyToggle shellyToggle
@inject IChargerService chargerService
@inject ITruckTypeService truckTypeService
@inject IServiceScopeFactory scopeFactory
@inject DAO dao

<PageTitle>System Administration</PageTitle>

<main class="admin-container">
    <h1 class="page-header">Welcome to the System Administration Page</h1>

    <section class="control-panel">
        <button class="btn" @onclick="Start">START</button>
        <button class="btn" @onclick="Stop">STOP</button>
    </section>

    <section class="charger-form">
        <h2>Tilføj Oplader</h2>
        <p>Skriv opladerens Ampere</p>
        <input class="input-field" type="number" @bind="ampere" min="1" placeholder="Ampere">
        <p>Turn On Webhook</p>
        <input type="text" @bind="turnOnUri"/>
        
        <p>Turn Off Webhook</p>
        <input type="text" @bind="turnOffUri"/>
        <button class="btn" @onclick="AddCharger">Tilføj</button>
        @if (showChargerLabel)
        {
            <label class="success-message">Oplader med ID: @chargerId oprettet</label>
        }
    </section>

    <section class="charger-form">
        <h2>Tilføj TruckType</h2>
        <p>Skriv modelnavn</p>
        <input class="input-field" type="text" @bind="modelNameSelected" min="1" placeholder="Modelnavn">
        <p>Batteristørrelse</p>
        <input type="number" @bind="batterySizeSelected"/>
        
        <button class="btn" @onclick="AddTruckType">Tilføj</button>
        @if (showTruckLabel)
        {
            <label class="success-message">Model: @modelName med batteri: @batteysize AH er successfult oprettet </label>
        }
    </section>
        <section class="charger-form">
            <h2>Instillinger</h2>
            <p>Smart Charging</p>
            <input class="input-field" type="checkbox" @bind="smartcharging">
            
            <p>Daglig deadline for opladning (Time 0-23)</p>
            <input type="number" min="0" max="23" @bind="deadline"/>
            
            <button class="btn" @onclick="UpdateSettings">Opdater</button>
            @if (false)
            {
                <label class="success-message">Model: @modelName med batteri: @batteysize AH er successfult oprettet </label>
            }
        </section>
</main>

@code {

    // Input values
    int ampere;
    string modelNameSelected;
    int batterySizeSelected;
    public string turnOffUri;
    public string turnOnUri;
    public int deadline;
    
    // Label values
    bool showChargerLabel = false;
    bool showTruckLabel = false;
    int chargerId;
    string modelName;
    int batteysize;
    Settings? settings;
    bool smartcharging;

    
    protected override async Task OnInitializedAsync()
    {
        settings = await dao.GetSettings();
        if (settings != null)
        {
            smartcharging = settings.SmartCharging;
            deadline = settings.DailyDeadline;
        }
    }
        
    private async Task UpdateSettings()
    {
        Settings newSettings = new Settings()
        {
            DailyDeadline = deadline,
            SmartCharging = smartcharging,
        };

        try
        {
            using (var scope = scopeFactory.CreateScope())
            {
                var dao = scope.ServiceProvider.GetRequiredService<DAO>();
                List<WallCharger> chargers = await dao.GetWallChargers();
                await dao.UpdateSettings(newSettings);
            }
            
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
    }
    
    private async Task AddCharger()
    {
        if (ampere == null || ampere == 0)
        {
        // Handle the case where ampere is null.
            return;
        }
        WallCharger newCharger = new WallCharger()
        {
            ChargerId = 0,
            ChargerAmpere = ampere,
            TurnOffUri = turnOffUri,
            TurnOnUri = turnOnUri,
        };

        try
        {
            WallCharger chargerAdded = await chargerService.CreateAsync(newCharger);
            chargerId = chargerAdded.ChargerId;
            showChargerLabel = true; 
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
    }
    private async Task AddTruckType()
    {
        if (modelNameSelected == "" || batterySizeSelected == 0)
        {
            return;
        }
        TruckType newTruckType = new TruckType()
        {
            Model = modelNameSelected,
            BatterySizeAh = batterySizeSelected,
        };

        try
        {
            TruckType truckAdded = await truckTypeService.CreateAsync(newTruckType);
            batteysize = truckAdded.BatterySizeAh;
            modelName = truckAdded.Model;
            showTruckLabel = true; 
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
    }

    
    
    private void Start()
    {
        shellyToggle.StartSystem();
    }

    private void Stop()
    {
        shellyToggle.StopSystem();
    }
    
    
}